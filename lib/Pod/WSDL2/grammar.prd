{ 
	use Pod::WSDL2::Doc;
	use Pod::WSDL2::Param;
	use Pod::WSDL2::Return;
	use Pod::WSDL2::Fault;
	use Pod::WSDL2::Attr;
}

wsdlblock: doc_line(s?) command_block(s?) eofile {
	$return = {
		'docs' => Pod::WSDL2::Doc->new(join('',@{$item[1]}))
	};

	foreach (@{$item[2]}) {
		if    (ref($_) eq 'Pod::WSDL2::Fault')  { push(@{$return->{'faults'}}, $_) }
		elsif (ref($_) eq 'Pod::WSDL2::Param')  { push(@{$return->{'inputs'}}, $_) }
		elsif (ref($_) eq 'Pod::WSDL2::Return') { $return->{'return'} = $_ }
		elsif ($_ eq "oneway")                  { $return->{'oneway'} = 1; }
	}
	1;
}
| <error>

command_block: (one_way | input_block | return_block | fault_block) { $return = $item[1]; }

input_block: input_type <commit> field_name ( hash | array | simple ) {
	$item[4]->{input_type} = $item[1];
	$item[4]->{name}       = $item[3];
	$return = Pod::WSDL2::Param->new($item[4]);
}
|<error>

input_type: '_INOUT' | '_IN' | '_OUT'

return_block: '_RETURN' <commit> ( hash | array | simple     ) { $return = Pod::WSDL2::Return->new($item[3]); }
fault_block:  '_FAULT'  <commit> ( hash | array | fault_type ) { $return = Pod::WSDL2::Fault->new( $item[3]); }

eofile: /^\Z/

doc_line: ...!commands comment   { $return = $item[2]; 1; }
comment: <skip:'[ \t]*'> /.*\n+/ { $return = $item[2]; 1; }

field_name: /[\w-]+/ { $return = $item[1]; 1; }
          | <error> 

simple: sigul <commit> data_type required(?) doc_line(s?) { 
	# $return = Pod::WSDL2::Attr->new({
	$return = {
		complex  => 0,
		multiple => $item{'sigul'},
		type     => $item{'data_type'},
		required => ($item{'required(?)'}->[0])?1:0,
		docs     => join('',@{$item{'doc_line(s?)'}})
	};
	#});
}

sigul: '$' { $return = 0; 1;}
     | '@' { $return = 1;   }

fault_type: sigul(?) data_type comment(?) {
	$return = {
		type => $item{'data_type'},
		docs => $item{'comment(?)'}->[0]
	};
}

hash: '{' <commit> hash_element(s) '}' {  
	$return = { 
		complex => 1, 
		type    => 'hash',
		attrs   => $item{'hash_element(s)'}
	};
}

array: '[' <commit> ( hash | array | array_element(s) ) ']' {
	if (ref($item[3]) eq "HASH") {
		$item[3]->{'multiple'} = 1;
		$return = $item[3];
	}
	else {
		if (ref($item[3]) eq "ARRAY") {
			for (my $i=0; $i <= $#{$item[3]}; $i++) {
				unless (ref($item[3]->[$i]) eq "Pod::WSDL2::Attr") {
					$item[3]->[$i] = Pod::WSDL2::Attr->new({
						'name' => "Index$i",
						%{$item[3]->[$i]}
					});
				}
			}
		}
		else {
			$item[3] = [ $item[3] ];
		}

		$return = { 
			complex => 1, 
			type    => 'array', 
			attrs   => $item[3]
		};
	}
}

array_element: '_ATTR' simple {
	$return = $item[2];
}

hash_element: '_ATTR' field_name ( hash | array | simple ) {
	$return = Pod::WSDL2::Attr->new({
		'name' => $item{field_name},
		%{$item[3]}
	});
}

required: /^REQUIRED$/i { $return = 1; }

commands: input_type | one_way | '_RETURN' | '_FAULT' | '_ATTR' | '{' | '}' | '[' | ']'

one_way: '_ONEWAY' { $return = 'oneway'; }

data_type: /\w+(::\w+)*/ { $return = $item[1]; }

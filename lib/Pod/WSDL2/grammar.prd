{ 
	use Pod::WSDL2::Doc;
	use Pod::WSDL2::Param;
	use Pod::WSDL2::Return;
	use Pod::WSDL2::Fault;
}

wsdlblock: doc_line(s?) command_block(s?) eofile {
	$return = {
		'docs' => Pod::WSDL2::Doc->new(join('',@{$item[1]}))
	};

	foreach (@{$item[2]}) {
		if    (ref($_) eq 'Pod::WSDL2::Fault')  { push(@{$return->{'faults'}}, $_) }
		elsif (ref($_) eq 'Pod::WSDL2::Param')  { push(@{$return->{'inputs'}}, $_) }
		elsif (ref($_) eq 'Pod::WSDL2::Return') { $return->{'return'} = $_ }
		elsif ($_ eq "oneway")                  { $return->{'oneway'} = 1; }
	}
	1;
}
| <error>

command_block: (one_way | input_block | return_block | fault_block) { $return = $item[1]; }

input_block: input_type <commit> field_name ( hash | array | simple ) {
	$item[4]->{input_type} = $item[1];
	$item[4]->{name}       = $item[3];
	$return = Pod::WSDL2::Param->new($item[4]);
}
|<error>

input_type: '_INOUT' | '_IN' | '_OUT'

return_block: '_RETURN' <commit> ( hash | array | simple     ) { $return = Pod::WSDL2::Return->new($item[3]); }
fault_block:  '_FAULT'  <commit> ( hash | array | fault_type ) { $return = Pod::WSDL2::Fault->new( $item[3]); }

eofile: /^\Z/

doc_line: ...!commands comment   { $return = $item[2]; 1; }
comment: <skip:'[ \t]*'> /.*\n+/ { $return = $item[2]; 1; }

field_name: /[\w-]+/ { $return = $item[1]; 1; }
          | <error> 

simple: sigul <commit> data_type required(?) comment(?) { 
	$return = {
		simple   => 1,
		multiple => $item{'sigul'},
		type     => $item{'data_type'},
		required => ($item{'required(?)'}->[0])?1:0,
		docs     => Pod::WSDL2::Doc->new($item{'comment(?)'}->[0])
	};
}

sigul: '$' { $return = 0; 1;}
     | '@' { $return = 1;   }

fault_type: sigul(?) data_type comment(?) {
	$return = {
		type => $item{'data_type'},
		docs => Pod::WSDL2::Doc->new($item{'comment(?)'}->[0])
	};
}

hash: '{' hash_element(s) '}' {  
	$return = { 
		simple   => 0, 
		type     => 'hash',
		elements => $item{'hash_element(s)'}
	};

	# This is a temporary hack to make hashs return anyType so that
	# we can move forward with using the new syntax while I work on the actual
	# implmentation
	$return = {
		simple => 1,
		multiple => 0,
		type => 'anyType',
		required => 1,
	};
}

array: '[' ( hash | array | simple(s) ) ']' {
	$return = { 
		simple   => 0, 
		type     => 'array', 
		elements => $item[2]
	};

	# This is a temporary hack to make hashs return anyType so that
	# we can move forward with using the new syntax while I work on the actual
	# implmentation
	$return = {
		simple => 1,
		multiple => 0,
		type => 'anyType',
		required => 1,
	};
}

hash_element: field_name '=>' ( hash | array | simple ) {
	$return = {
		'name' => $item{field_name},
		%{$item[3]}
	};
}

required: /^REQUIRED$/i { $return = 1; }

commands: input_type | one_way | '_RETURN' | '_FAULT'

one_way: '_ONEWAY' { $return = 'oneway'; }

data_type: /\w+(::\w+)*/ { $return = $item[1]; }
